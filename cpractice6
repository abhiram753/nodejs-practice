const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const path = require('path')

const databasePath = path.join(__dirname, 'covid19India.db')

const app = express()

app.use(express.json())

let database = null

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => console.log('Server is Running'))
  } catch (error) {
    console.log(`DB Error: ${error.message}`)
    process.exit(1)
  }
}

initializeDbAndServer()

const objectSnaketoCamel = dbObject => {
  return {
    stateId: dbObject.stateId,
    stateName: dbObject.state_name,
    population: dbObject.population,
  }
}

const districtSnaketoCamel = dbObject => {
  return {
    districtId: dbObject.district_id,
    districtName: dbObject.district_name,
    stateId: dbObject.state_id,
    cases: dbObject.cases,
    cured: dbObject.cured,
    active: dbObject.active,
    deaths: dbObject.deaths,
  }
}

const reportSnaketoCamelCase = dbObject => {
  return {
    totalCases: newObject.cases,
    totalCured: newObject.cured,
    totalActive: newObject.active,
    totalDeaths: newObject.deaths,
  }
}

app.get('/states/', async (request, response) => {
  const allStatesList = `
    SELECT
      *
    FROM
      state
    ORDER BY
     state_id;`
  const stateList = await database.all(allStatesList)
  const stateResult = stateList.map(eachObject => {
    return objectSnaketoCamel(eachObject)
  })
  response.send(stateResult)
})

app.get('/states/:stateId/', async (request, response) => {
  const {stateId} = request.params
  const getState = `
  SELECT*
  FROM state
  where stateId = ${stateId};`
  const newState = await database.get(getState)
  const stateResult = objectSnaketoCamel(newState)
  response.send(stateResult)
})

app.post('/districts/', async (request, response) => {
  const createDistrict = request.body
  const {districtName, stateId, cases, cured, active, deaths} = createDistrict
  const newDistrict = `
  INSERT INTO
  district(district name,state_id,cases,cured,active,deaths)
  VALUES
  ('${districtName}',
  ${stateId},
  ${cases},
  ${cured},
  ${active},
  ${deaths}
  )`
  const addDistrict = await dataBase.run(newDistrict)
  const districtId = addDistrict.lastId
  response.send('District Successfully Added')
})

app.get('/districts/:districtId/', async (request, response) => {
  const {districtId} = request.params
  const getDistrict = `
  SELECT *
  from district
  where districtId =${districtId};`
  const newDistrict = await database.get(getDistrict)
  const districtResult = objectSnaketoCamel(newDistrict)
  response.send(districtResult)
})

app.put('/districts/:districtId/', async (request, response) => {
  const {districtId} = request.params
  const districtDetails = request.body
  const {districtName, stateId, cases, cured, active, deaths} = districtDetails
  const updateDistrict = `
  UPDATE district
  SET 
  district_name = '${districtName}',
  state_id = ${stateId},
  cases = ${cases},
  cured = ${cured},
  active = ${active},
  deaths = ${deaths},
  WHERE district_id = ${districtId};
  `
  await db.run(updateDistrict)
  response.send('District Details Updated')
})

app.get(`/states/:stateId/stats/`, async (request, response) => {
  const {stateId} = request.params
  const getStateReport = `
  SELECT SUM(cases) as cases,
  SUM(cured) as cured,
  SUM(active) as active,
  SUM(deaths) as deaths
  FROM district
  WHERE state_id =${stateId};`
  const stateReport = await dataBase.get(getStateReport)
  const resultReport = reportSnaketoCamelCase(stateReport)
  response.send(resultReport)
})

app.get(`/districts/:districtId/details/`, async (request, response) => {
  const {districtId} = request.params
  const stateDetails = `
  SELECT statename
  FROM state JOIN district
  ON state.state_id = district.state_id
  WHERE district.district_id = ${districtId};`
  const stateName = await dataBase.get(stateDetails)
  response.send({stateName: stateName.state_name})
})

module.exports = app

